#!/usr/bin/python3

import argparse
import shutil
import subprocess

from os import path, makedirs, listdir, remove, chdir
from pathlib import Path

DESCRIPTION = "SEDAS Manager project toolkit, run --help/-H to get info about args"
PATH = str(Path(__file__).parents[1])

PURPLE = '\033[0;35m'
BLUE = '\033[0;34m'
NC = '\033[0m'


# functions
def makefile(path):
    with open(path, "w"):
        pass


def run_command(command):
    comm_args = command.split(" ")
    with subprocess.Popen(comm_args, stdout=subprocess.PIPE, bufsize=1, universal_newlines=True) as p:
        for line in p.stdout:
            print(line, end='')


def clean():
    path_src = path.join(PATH, "src")
    path_workers = path.join(PATH, "src/workers")
    path_build = path.join(PATH, "src_build")
    path_cpp_build = path.join(PATH, "src/build")

    def check_files(folder_path):
        for filename in listdir(folder_path):
            file_path = path.join(folder_path, filename)

            if not path.isfile(file_path):
                continue

            if "map" in filename or "js" in filename:
                remove(file_path)

    def clean_folder(folder_path, file):
        shutil.rmtree(folder_path)
        makedirs(folder_path)
        makefile(path.join(folder_path, file))

    check_files(path_src)
    check_files(path_workers)

    print(f"[{PURPLE}Build info{NC}] {BLUE}Cleaned directories from autogenerated files{NC}")

    clean_folder(path_build, ".gitkeep")
    clean_folder(path_cpp_build, ".gitkeep")

    print(f"[{PURPLE}Build info{NC}] {BLUE}Cleared build dirs{NC}")


def compile():
    path_src = path.join(PATH, "src")

    def compile_cpp():
        chdir(path_src)
        run_command("node-gyp configure build")
        print(f"[{PURPLE}Build info{NC}] {BLUE}Built all C++ files{NC}")

    def compile_ts():
        chdir(PATH)
        run_command("npx tsc --project ./tsconfig.json")
        print(f"[{PURPLE}Build info{NC}] {BLUE}Compiled Typescript{NC}")

    clean()
    compile_cpp()
    compile_ts()

    print(f"[{PURPLE}Build info{NC}] {BLUE}Compiled target files{NC}")


def developement():
    path_main = path.join(PATH, "src/main.js")

    compile()

    print(f"[{PURPLE}Build info{NC}] {BLUE}Running app in developement mode{NC}")
    run_command(f"electron {path_main}")


def build():
    compile()

    run_command("electron-builder build -wl")


FUNC_DICT = {
    "clean": clean,
    "compile": compile,
    "dev": developement,
    "build": build
}


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    # Adding arguments
    parser.add_argument("--clean", action="store_true", help="Clean project from autogenerated files")
    parser.add_argument("--compile", action="store_true", help="Compile project files and link depencies")
    parser.add_argument("--dev", action="store_true", help="Run developement server")
    parser.add_argument("--build", action="store_true", help="Build project into package")

    # Parse all args
    args = vars(parser.parse_args())
    for key, value in args.items():
        if value is not False:
            FUNC_DICT[key]()
            break # TODO: rework so that project can run from multiple-args
