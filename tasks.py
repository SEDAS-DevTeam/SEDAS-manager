from invoke import task

from os import path, makedirs, listdir, remove, chdir
from pathlib import Path
import shutil

DESCRIPTION = "SEDAS Manager project toolkit, run --list to get info about args"
PATH = str(Path(__file__).parent)

PURPLE = '\033[0;35m'
BLUE = '\033[0;34m'
NC = '\033[0m'


# functions
def makefile(path):
    with open(path, "w"):
        pass


def print_color(color, text):
    print(color + text + NC)


@task
def clean(ctx):
    """
        Clean working directories of autogenerated files
    """

    path_src = path.join(PATH, "src")
    path_workers = path.join(PATH, "src/workers")
    path_build = path.join(PATH, "src_build")
    path_cpp_build = path.join(PATH, "src/build")

    def check_files(folder_path):
        for filename in listdir(folder_path):
            file_path = path.join(folder_path, filename)

            if not path.isfile(file_path):
                continue

            if "map" in filename or "js" in filename:
                remove(file_path)

    def clean_folder(folder_path, file):
        shutil.rmtree(folder_path)
        makedirs(folder_path)
        makefile(path.join(folder_path, file))

    print_color(PURPLE, "Starting autogenerated files clean...")

    check_files(path_src)
    check_files(path_workers)

    print_color(PURPLE, "Cleaned directories from autogenerated files")

    clean_folder(path_build, ".gitkeep")
    clean_folder(path_cpp_build, ".gitkeep")

    print_color(PURPLE, "Cleared build dirs")


@task
def compile(ctx):
    """
        Compile target files
            1) TS -> JS
            2) C++ -> bind to TS part
    """
    def compile_cpp():
        path_src = path.join(PATH, "src")
        chdir(path_src)
        ctx.run("node-gyp configure build")
        print_color(PURPLE, "Built all C++ files")

    def compile_ts():
        chdir(PATH)
        ctx.run("npx tsc --project ./tsconfig.json")
        print_color(PURPLE, "Compiled Typescript")

    print_color(PURPLE, "Compiling target files...")
    compile_cpp()
    compile_ts()

    print_color(PURPLE, "Compiled target files")


@task
def devel(ctx):
    """
        Run app in development mode
    """
    path_main = path.join(PATH, "src/main.js")
    print_color(PURPLE, "Running app in dev mode...")
    ctx.run(f"{path.join(PATH, "node_modules/electron/dist/electron")} {path_main}")


@task
def build(ctx):
    """
        Create SEDAS executable
    """
    print_color(PURPLE, "Building app...")
    ctx.run("npm run make")

@task
def publish(ctx):
    """
        Publish SEDAS executable
    """
    print_color(PURPLE, "Publishing app...")
    ctx.run("npm run publish") # TODO

# runtime
print_color(PURPLE, DESCRIPTION)
